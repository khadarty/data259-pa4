name: Auto-checking

on:
  push:
    branches:
      - main

permissions:
  contents: write
  
jobs:
  check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Initialize messages.txt
        run: echo "" > messages.txt

      # Check for commits
      - name: Check for commits
        id: check_commits
        run: |
          COMMIT_COUNT=$(git rev-list --count --all)
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_ENV

          if [ "$COMMIT_COUNT" -lt 3 ]; then
            echo "❌ Fewer than 3 commits found. You may want to commit more often to ensure you don't lose any progress" >> messages.txt
          fi

      # Get the commit message
      - name: Get commit message
        id: commit_message
        run: |
          echo "COMMIT_MSG=$(git log -1 --pretty=%B)" >> $GITHUB_ENV

      # Check if this is a merge commit (i.e., part of a PR)
      - name: Check if the commit was a PR merge or direct commit
        run: |
          if [[ "${{ env.COMMIT_MSG }}" == *"Merge pull request"* ]]; then
            echo "✅ This commit is a pull request merge."
          else
            echo "❌ Direct commit detected on main branch."
          fi

      # Check for required files
      - name: Check for required files
        run: |
          PDF_FILES=$(find . -name "*.pdf")
          NOTEBOOK_FILES=$(find . -name "*.ipynb")
          QM_FILES=$(find . -name "*.qmd")

          if [[ -z "$PDF_FILES" ]]; then
            echo "❌ No PDF files found. PDF is needed to submit assignment to Gradescope." >> messages.txt
          fi

          if [[ -z "$NOTEBOOK_FILES" && -z "$QM_FILES" ]]; then
            echo "❌ No .ipynb or .qmd files found. At least one is necessary to complete your assignment." >> messages.txt
            exit 1
          fi

          if [[ -n "$PDF_FILES" && (-n "$NOTEBOOK_FILES" || -n "$QM_FILES") && -n "$IMAGE_FILES" ]]; then
            echo "✅ Required files found: PDF, at least one of .ipynb or .qmd" >> messages.txt
          fi

      # Install dependencies
      - name: Install dependencies
        run: |
          pip install pylint nbqa

      # Run pylint on .py files if they exist
      - name: Check for Python files and run pylint
        id: pylint_py
        run: |
          # Find all .py files and handle spaces in filenames
          echo "Looking for Python files..." >> messages.txt
          PY_FILES=$(find . -name "*.py" -not -path "*/.ipynb_checkpoints/*")
          
          # Debugging: Output the found Python files
          if [ -z "$PY_FILES" ]; then
            echo "⚠ No Python files found for linting." >> messages.txt
          else
            echo "Found Python files:" >> messages.txt
            echo "$PY_FILES" >> messages.txt

            # Check for spaces in filenames
            if echo "$PY_FILES" | grep -q " "; then
              echo "⚠️ Warning: Please avoid using spaces in file names. Spaces can cause issues during linting." >> messages.txt
            fi
            
            # Run pylint on each file separately, ensuring proper handling of filenames
            while IFS= read -r file; do
              echo "Running pylint on \"$file\"" >> messages.txt
              pylint "$file" --disable=W0106,E0401 --output-format=parseable >> pylint_report_py.txt || true
            done <<< "$PY_FILES"
            
            # Debugging: Show pylint output
            echo "Pylint output:"
            cat pylint_report_py.txt

            if [ ! -s pylint_report_py.txt ]; then
              echo "❌ Pylint returned no output." >> messages.txt
            else
              echo "✅ Pylint ran successfully." >> messages.txt
              pylint_score=$(grep -oP '(?<=Your code has been rated at )\d+(\.\d+)?(?=/)' pylint_report_py.txt | head -n 1)
              if [ -z "$pylint_score" ]; then
                echo "❌ Pylint score could not be determined." >> messages.txt
              else
                pylint_score_float=$(printf "%.2f" "$pylint_score")
                echo "pylint_score_float=$pylint_score_float" >> $GITHUB_ENV
                echo "✅ Pylint score is $pylint_score_float." >> messages.txt
              fi
            fi
          fi

      # Check for .ipynb files and run nbqa
      - name: Check for Notebook files and run nbqa
        id: nbqa
        run: |
          # Find all .ipynb files excluding .ipynb_checkpoints
          echo "Looking for Notebook files..." >> messages.txt
          NOTEBOOK_FILES=$(find . -name "*.ipynb" -not -path "*/.ipynb_checkpoints/*")
          
          # Debugging: Output the found notebook files
          if [ -z "$NOTEBOOK_FILES" ]; then
            echo "⚠️ No Jupyter Notebook files found for linting." >> messages.txt
          else
            echo "Found Notebook files:" >> messages.txt
            echo "$NOTEBOOK_FILES" >> messages.txt

            # Check for spaces in filenames
            if echo "$NOTEBOOK_FILES" | grep -q " "; then
              echo "⚠️ Warning: Please avoid using spaces in file names. Spaces can cause issues during linting." >> messages.txt
            fi
            
            # Run nbqa on each notebook file, ensuring proper handling of filenames
            while IFS= read -r notebook; do
              echo "Running nbqa pylint on \"$notebook\"" >> messages.txt
              nbqa pylint "$notebook" --disable=W0106,E0401 --output-format=parseable >> nbqa_report.txt || true
            done <<< "$NOTEBOOK_FILES"
            
            # Debugging: Show nbqa output
            echo "nbqa output:"
            cat nbqa_report.txt

            if [ ! -s nbqa_report.txt ]; then
              echo "❌ nbqa returned no output." >> messages.txt
            else
              echo "✅ nbqa ran successfully." >> messages.txt
              nbqa_score=$(grep -oP '(?<=Your code has been rated at )\d+(\.\d+)?(?=/)' nbqa_report.txt | head -n 1)
              if [ -z "$nbqa_score" ]; then
                echo "❌ nbqa score could not be determined." >> messages.txt
              else
                nbqa_score_float=$(printf "%.2f" "$nbqa_score")
                echo "nbqa_score_float=$nbqa_score_float" >> $GITHUB_ENV
                echo "✅ nbqa score is $nbqa_score_float." >> messages.txt
              fi
            fi
          fi

      # Output results
      - name: Output linting results
        run: |
          echo -e "### Pylint Report\n" >> messages.txt
          if [ -f pylint_report_py.txt ]; then
            cat pylint_report_py.txt >> messages.txt
          else
            echo "⚠️ No Pylint report found." >> messages.txt
          fi

          echo -e "### nbqa Report\n" >> messages.txt
          if [ -f nbqa_report.txt ]; then
            cat nbqa_report.txt >> messages.txt
          else
            echo "⚠️ No nbqa report found." >> messages.txt
          fi

          # Combine scores and evaluate
          if [ -n "$pylint_score_float" ]; then
            if (( $(echo "$pylint_score_float < 7.99" | bc -l) )); then
              echo "❌ Pylint score indicates issues. Score = $pylint_score_float" >> messages.txt
            else
              echo "✅ Pylint score is acceptable. Score = $pylint_score_float" >> messages.txt
            fi
          fi
          
          if [ -n "$nbqa_score_float" ]; then
            if (( $(echo "$nbqa_score_float < 7.99" | bc -l) )); then
              echo "❌ nbqa score indicates issues. Score = $nbqa_score_float" >> messages.txt
            else
              echo "✅ nbqa score is acceptable. Score = $nbqa_score_float" >> messages.txt
            fi
          fi
      
      - name: Output results
        run: |
          echo "All pre-checks completed. Please address any issues listed above and remember to turn in your work on Gradescope!" >> messages.txt

      # Commit grading messages
      - name: Commit grading messages
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add messages.txt
          if ! git diff --cached --quiet; then
            git commit -m "Add grading messages"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
